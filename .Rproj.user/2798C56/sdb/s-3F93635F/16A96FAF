{
    "contents" : "# Required libraries\nlibrary(lubridate)\nlibrary(beanplot)\nlibrary(doBy)\n\n# Read in data from Google Drive\n# Need to update path\norders.train <- read.table(\"C:/Users/Katie/Google Drive/Predict 498 Capstone/orders_train.txt\", header = TRUE, sep = \";\")\n# orders.train <- read.table(\"C:/Users/Jim Braun/My Documents/Predict 498 Capstone/Data Mining Cup/orders_train.txt\", header = TRUE, sep = \";\")\nstr(orders.train)\n\n# Update date fields to date type instead of factors\norders.train$orderDate <- as.Date(orders.train$orderDate, format = \"%Y-%m-%d\")\norders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = \"%Y-%m-%d\")\norders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = \"%Y-%m-%d\")\norders.train$creationDate <- as.Date(orders.train$creationDate, format = \"%Y-%m-%d\")\nstr(orders.train)\n\nsummary(orders.train)\n\n# Add date diff variables\norders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit=\"days\"))\norders.train$accountAge <- as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit=\"weeks\"))/52.25\norders.train$customerAge <- as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit=\"weeks\"))/52.25\n\n# Check\nsummary(orders.train[15:17])\n\n# timeToDeliver should never be negative, and age should never be negative\norders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)\norders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)\n# age should also probably not be > 100 - what should we use for the cut-off?\norders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)\n\n# Recheck\nsummary(orders.train[15:17])\n\n# Look at PDF of numeric variables given reponse\n# Note that we're just using a random sample due to processing time for graphics\nset.seed(498)\nsample_ind <- sample(seq_len(nrow(orders.train)), size = 100)\norders.sample <- orders.train [sample_ind, ]\nbeanplot(customerAge ~ returnShipment, orders.sample, side = \"b\", col = list(\"yellow\", \"orange\"), border = c(\"yellow2\",\"darkorange\"), main = \"Customer Age Distribution\", ylab = \"Age in Years\", xaxt=\"n\")\nlegend(\"topleft\", bty=\"n\",c(\"Not Returned\", \"Returned\"), fill = c(\"yellow\", \"orange\"))\nbeanplot(accountAge ~ returnShipment, orders.sample, side = \"b\", col = list(\"yellow\", \"orange\"), border = c(\"yellow2\",\"darkorange\"), main = \"Account Age Distribution\", ylab = \"Age in Years\", xaxt=\"n\")\nlegend(\"topleft\", bty=\"n\",c(\"Not Returned\", \"Returned\"), fill = c(\"yellow\", \"orange\"))\nbeanplot(timeToDeliver ~ returnShipment, orders.sample, side = \"b\", col = list(\"yellow\", \"orange\"), border = c(\"yellow2\",\"darkorange\"), main = \"Delivery Time Distribution\", ylab = \"Time in Days\", xaxt=\"n\")\nlegend(\"topleft\", bty=\"n\",c(\"Not Returned\", \"Returned\"), fill = c(\"yellow\", \"orange\"))\nbeanplot(price ~ returnShipment, orders.sample, side = \"b\", col = list(\"yellow\", \"orange\"), border = c(\"yellow2\",\"darkorange\"), main = \"Price Distribution\", xaxt=\"n\")\nlegend(\"topleft\", bty=\"n\",c(\"Not Returned\", \"Returned\"), fill = c(\"yellow\", \"orange\"))\n\n# Mean & count of response given nominal vars\n# Only doing ones with few possible values- salutation & state\nsummaryBy(returnShipment ~ salutation, orders.train, FUN=c(length,mean))\nsummaryBy(returnShipment ~ state, orders.train, FUN=c(length,mean))\n",
    "created" : 1397191691251.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1431424760",
    "id" : "16A96FAF",
    "lastKnownWriteTime" : 1397193512,
    "path" : "~/GitHub/CAPSTONE/DMC_KT.r",
    "project_path" : "DMC_KT.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}