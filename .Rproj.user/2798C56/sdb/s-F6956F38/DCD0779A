{
    "contents" : "# Variable Transformations\n# Libraries\nlibrary(doBy)\n\n# Read in data from GitHub\norders.train <- read.table(\"orders_train.txt\", header = TRUE, sep = \";\")\nstr(orders.train)\n\n# Update date fields to date type instead of factors\norders.train$orderDate <- as.Date(orders.train$orderDate, format = \"%Y-%m-%d\")\norders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = \"%Y-%m-%d\")\norders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = \"%Y-%m-%d\")\norders.train$creationDate <- as.Date(orders.train$creationDate, format = \"%Y-%m-%d\")\n\n# Add date diff variables\norders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit=\"days\"))\norders.train$accountAge <- as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit=\"weeks\"))/52.25\norders.train$customerAge <- as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit=\"weeks\"))/52.25\n# Check\nsummary(orders.train[15:17])\n# timeToDeliver should never be negative, and age should never be negative\norders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)\norders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)\n# age should also probably not be > 100 - what should we use for the cut-off?\norders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)\n# Recheck\nsummary(orders.train[15:17])\n\n# Sizing recodes - creating a table with frequencies to work from and going to remove sizes as I recode them\n# There may be some errors here- for example, Euro children's sizes start at 50, but some conversions go up to size 52 for men's suits, etc\nsize.table <- summaryBy(size ~ size,orders.train,FUN=length)\nView(size.table)\n# Ones that seem like US sizes\norders.train$sizeLetter <- ifelse(as.character(orders.train$size)>\"a\",toupper(as.character(orders.train$size)),NA)\nsize.table <- size.table[-which(as.character(size.table$size)>\"a\"),]\norders.train$sizePant <- ifelse(as.numeric(as.character(orders.train$size))>2900,as.numeric(as.character(orders.train$size)),NA)\nsize.table <- size.table[-which(as.numeric(as.character(size.table$size))>2900),]\n# Euro children's sizes go from 50-188\n# http://www.ebay.com/gds/Guide-to-Understanding-European-Clothing-Sizes-/10000000007740616/g.html\norders.train$sizeChild <- ifelse(as.numeric(as.character(orders.train$size))>=50 & as.numeric(as.character(orders.train$size))<=188,as.numeric(as.character(orders.train$size)),NA)\nsize.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]\n# Remaining\norders.train$sizeOther <- ifelse(is.na(orders.train$sizeLetter) & is.na(orders.train$sizePant) & is.na(orders.train$sizeChild),as.character(orders.train$size),NA)\n\n# check\ntable(orders.train$sizeLetter)\ntable(orders.train$sizePant)\ntable(orders.train$sizeChild)\ntable(orders.train$sizeOther)\n\n# Add mode function - note that this only gives one mode if there is more than one\nmymode <- function(x){\n  names(sort(-table(as.character(x))))[1]\n}\ncustMode1 <- summaryBy(toupper(as.character(orders.train$size)) ~ orders.train$customerID, orders.train, FUN=mymode)\ncustMode2 <- summaryBy(sizeLetter ~ customerID, orders.train[-which(is.na(orders.train$sizeLetter)),], FUN=mymode)\ncustMode3 <- summaryBy(sizePant ~ customerID, orders.train[-which(is.na(orders.train$sizePant)),], FUN=mymode)\ncustMode4 <- summaryBy(sizeChild ~ customerID, orders.train[-which(is.na(orders.train$sizeChild)),], FUN=mymode)\ncustMode5 <- summaryBy(sizeOther ~ customerID, orders.train[-which(is.na(orders.train$sizeOther)),], FUN=mymode)\ncustMode <- merge(custMode1,custMode2,by=\"customerID\",all=T)\ncustMode <- merge(custMode,custMode3,by=\"customerID\",all=T)\ncustMode <- merge(custMode,custMode4,by=\"customerID\",all=T)\ncustMode <- merge(custMode,custMode5,by=\"customerID\",all=T)\nnames(custMode) <- c(\"customerID\",\"sizeMode\",\"szLetterMode\",\"szPantMode\", \"szChildMode\", \"szOtherMode\")\n# Merge back into original file, then drop the unnecessary data frames to clean up the workspace\norders.train <- merge(orders.train,custMode,by=\"customerID\",all=T)\nremove(custMode,custMode1,custMode2,custMode3,custMode4,custMode5,size.table)\n\n# Add holiday/bday flags\norders.train$holidayFlag <- ifelse(as.character(orders.train$orderDate,format=\"%m%d\")>=\"1125\",ifelse(as.character(orders.train$orderDate,format=\"%m%d\")<=\"1230\",1,0),0)\norders.train$bdayFlag <- ifelse(as.character(orders.train$orderDate,format=\"%m%d\")>=as.character(orders.train$dateOfBirth-30,format=\"%m%d\"),ifelse(as.character(orders.train$orderDate,format=\"%m%d\")<=as.character(orders.train$dateOfBirth+5,format=\"%m%d\"),1,0),0)\n# Need to address cases at the beginning/end of the year\n\n# Add number of items per order\n#   Note- these take awhile to run! - need to troubleshoot\nnumItems <- summaryBy(orders.train$orderItemID ~ orders.train$customerID + orders.train$orderDate, orders.train, FUN=count)\norders.train <- merge(orders.train,numItems,by=c(\"customerID\",\"orderDate\"))\ndupItems <- summaryBy(orders.train$orderItemID ~ orders.train$customerID + orders.train$orderDate + orders.train$itemID, orders.train, FUN=count)\norders.train <- merge(orders.train,dupItems,by=c(\"customerID\",\"orderDate\",\"itemID\"))\n\n\n# List variables\nstr(orders.train)\nsummary(orders.train)\n\n\n# -------------------------------------------- #\n# Ideas for other variables\n# -------------------------------------------- #\n#\n# General customer behavior principles (hypotheses) #\n#\n  # people know their own size the best\n  # people know their own sizing system best\n  # some articles of clothing are more difficult to size than others (i.e. pants > t-shirts)\n  # people are generally motivated to save money (price sensitivity)\n    # Some customers are MORE price sensitive\n  # people generally want an item when it is fashionable (fashion sensitivity)\n    # Some customers are MORE fashion sensitive\n  # A purchase outside a customer’s profile is more likely to be returned\n#\n# Tasks #\n#\n# We may consider sorting these later by types of risks \n    # e.g. customer risk, manufacturer risk, price risk, etc.\n#\n# breakout of sizes - done, but may revisit to look at tying to items?\n# mode for all size variables by customer - done\n# number of items per order - need to troubleshoot- getting an error about differing number of rows\n# flag for if an item's price drops within x number of days of purchase\n#\n# flag for if customer is price sensitive \n    # may yield other interactions, like increased propensity to return if price drop)\n# flag for if customer is fashion sensitive (may order at earlier dates)\n    # may yield other interactions, like increased propensity to return if product is older or cheaper\n#\n# colorDuplicate = same item ordered on orderDate but in different color as well\n# orderDuplicate = same exact item ordered >1x on orderDate\n# highRiskCustomer = has the customer returned greater than X% of items? \n    # (something above the mean return rate)\n# holidayOrder = orderDate or deliveryDate is within 30 days prior or 5 days post Xmas- done\n# birthdayOrder = order is within 30 days prior or 5 days post customer’s birthday - done, but need to address cases of birthdays at beginning/end of year\n    # (may have to work a way to make it check bday each year)\n# highRiskManufacturer = does this manufacturer get a high % of returns \n    # (may be cleaner than listing out or creating nodes on each manufacturerID)\n# highRiskColor = does this color get returned more frequently \n    # (may be cleaner than listing out or creating nodes on each color)\n# highRiskItem = does this item get returned more frequently \n    # (may be cleaner than listing out or creating nodes on each itemID)\n# Bought on sale?  Or bought at >X% discount?  (each item has a maximum price) \n    # we could see if different price points for each item results in a \n    # different return rate. This would be separate from the subsequent sale returns\n# UK or US Manufacturer (indicator variable - based on sizing conventions)\n\n",
    "created" : 1397943299406.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3887578851",
    "id" : "DCD0779A",
    "lastKnownWriteTime" : 1397941685,
    "path" : "~/GitHub/CAPSTONE/Transformations.R",
    "project_path" : "Transformations.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}