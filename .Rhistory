print("Jim's update")
source('~/.active-rstudio-document')
source('~/GitHub/CAPSTONE/Hello world.R')
source('~/GitHub/CAPSTONE/DMC_KT.r')
install.packages("beanplot")
library("beanplot", lib.loc="C:/Users/Jim Braun/Documents/R/win-library/3.0")
source('~/GitHub/CAPSTONE/DMC_KT.r')
install.packages("doBy")
library("doBy", lib.loc="C:/Users/Jim Braun/Documents/R/win-library/3.0")
source('~/GitHub/CAPSTONE/DMC_KT.r')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
orders.train <- read.table("C:/Users/Jim Braun/My Documents/Predict 498 Capstone/Data Mining Cup/orders_train.txt", header = TRUE, sep = ";")
str(orders.train)
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
str(orders.train)
summary(orders.train)
# Add date diff variables
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
orders.train$accountAge <- as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25
orders.train$customerAge <- as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25
# Check
summary(orders.train[15:17])
# timeToDeliver should never be negative, and age should never be negative
orders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)
orders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)
# age should also probably not be > 100 - what should we use for the cut-off?
orders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)
# Recheck
summary(orders.train[15:17])
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 100)
orders.sample <- orders.train [sample_ind, ]
beanplot(customerAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Customer Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(accountAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Account Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(timeToDeliver ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Delivery Time Distribution", ylab = "Time in Days", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(price ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Price Distribution", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
summaryBy(returnShipment ~ salutation, orders.train, FUN=c(length,mean))
summaryBy(returnShipment ~ state, orders.train, FUN=c(length,mean))
# Required libraries
library(lubridate)
library(beanplot)
library(doBy)
orders.train <- read.table("C:/Users/Jim Braun/My Documents/Predict 498 Capstone/Data Mining Cup/orders_train.txt", header = TRUE, sep = ";")
str(orders.train)
plot(orders.train, cex=0.1)
# Update date fields to date type instead of factors
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
str(orders.train)
summary(orders.train)
# Add date diff variables
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
orders.train$accountAge <- as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25
orders.train$customerAge <- as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25
# Check
summary(orders.train[15:17])
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 100)
orders.sample <- orders.train [sample_ind, ]
beanplot(customerAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Customer Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(accountAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Account Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(timeToDeliver ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Delivery Time Distribution", ylab = "Time in Days", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(price ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Price Distribution", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
plot(orders.sample, cex=0.1)
custSize <- with(orders.sample, tapply(size, customerID, max(table(size)))
)
custSize <- with(orders.sample, tapply(size, customerID, max)))
custSize <- with(orders.sample, tapply(size, customerID, max))
custSize <- xtabs(~customerID + size, data=orders.sample)
custSize
table(customerID,size)
customerID
table(customerID,size, data=orders.sample)
names(order.sample)
names(orders.sample)
custSize <- rbind(customerID,size)
custSize <- rbind(customerID,size, data=orders.sample)
customerID
price
custSize <- xtabs(~customerID + size, data=orders.sample)
> custSize
custsize
custSize
custID <- c(customerID)
sapply(orders.sample, mode, na.rm=TRUE)
sapply(orders.sample, mode)
orders.train <- read.table("C:/Users/Katie/Google Drive/Predict 498 Capstone/orders_train.txt", header = TRUE, sep = ";")
# Jim's path
# orders.train <- read.table("C:/Users/Jim Braun/My Documents/Predict 498 Capstone/Data Mining Cup/orders_train.txt", header = TRUE, sep = ";")
str(orders.train)
# Update date fields to date type instead of factors
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
str(orders.train)
summary(orders.train)
# Add date diff variables
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
orders.train$accountAge <- as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25
orders.train$customerAge <- as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25
# Check
summary(orders.train[15:17])
# timeToDeliver should never be negative, and age should never be negative
orders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)
orders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)
# age should also probably not be > 100 - what should we use for the cut-off?
orders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)
# Recheck
summary(orders.train[15:17])
# Look at PDF of numeric variables given reponse
# Note that we're just using a random sample due to processing time for graphics
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 100)
orders.sample <- orders.train [sample_ind, ]
beanplot(customerAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Customer Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(accountAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Account Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(timeToDeliver ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Delivery Time Distribution", ylab = "Time in Days", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(price ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Price Distribution", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
# Mean & count of response given nominal vars
# Only doing ones with few possible values- salutation & state
summaryBy(returnShipment ~ salutation, orders.train, FUN=c(length,mean))
summaryBy(returnShipment ~ state, orders.train, FUN=c(length,mean))
names(orders.sample)
summaryBy(customerID ~ size, data=orders.sample, FUN = function (x) {c(m=mad(x))})
summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mad(x))})
summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=max(x))})
summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mode(x))})
summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
library(modeest)
install.packages("modeest")
library(modeest)
summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode <- summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode
orders.sample$OrdNotMode <- ifelse((size != custMode),0,1)
orders.sample$OrdNotMode
orders.sample$OrdNotMode <- ifelse((orders.sample$size != orders.sample$custMode),0,1)
orders.sample$OrdNotMode
cbind(orders.sample,custMode)
orders.sample[-18]
order(orders.sample$customerID)
r <- order(orders.sample$customerID)
r
sortID <- orders.sample[r,]
sortID
cbind(sortID,custMode[,2])
orders.sample$OrdNotMode <- ifelse((orders.sample$size != orders.sample$custMode),0,1)
orders.sample$OrdNotMode
sortID$OrdNotMode <- ifelse((size != custMode),0,1)
sortID
sortID$OrdNotMode <- ifelse((sortID$size != sortID$custMode),0,1)
sortID$OrdNotMode <- ifelse((sortID$size != custMode[,2]),0,1)
sortID
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 10000)
orders.sample <- orders.train [sample_ind, ]
beanplot(customerAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Customer Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(accountAge ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Account Age Distribution", ylab = "Age in Years", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(timeToDeliver ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Delivery Time Distribution", ylab = "Time in Days", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(price ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Price Distribution", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
# Mean & count of response given nominal vars
# Only doing ones with few possible values- salutation & state
summaryBy(returnShipment ~ salutation, orders.train, FUN=c(length,mean))
summaryBy(returnShipment ~ state, orders.train, FUN=c(length,mean))
names(orders.sample)
# quick X vs Y plot
#plot(orders.sample, cex=0.1)
# calculate customer's preferred size
# this was WAY more complicated than necessary...
# mvf = most frequent value (a.k.a mode), requires Modeest package and library
custMode <- summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode
# sorting orders by customerID to cbind customer Mode to right observation
r <- order(orders.sample$customerID)
r
sortID <- orders.sample[r,]
sortID
cbind(sortID,custMode[,2])
# Add column to denote whether the order size was not the customer's usual order (size mode)
# had to use custMode column instead of one cbinded in. Not sure why, but this works
sortID$OrdNotMode <- ifelse((sortID$size != custMode[,2]),0,1)
sortID
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 100000)
orders.sample <- orders.train [sample_ind, ]
custMode <- summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode
# sorting orders by customerID to cbind customer Mode to right observation
r <- order(orders.sample$customerID)
r
sortID <- orders.sample[r,]
sortID
cbind(sortID,custMode[,2])
# Add column to denote whether the order size was not the customer's usual order (size mode)
# had to use custMode column instead of one cbinded in. Not sure why, but this works
sortID$OrdNotMode <- ifelse((sortID$size != custMode[,2]),0,1)
sortID
sortID$OrdNotMode
beanplot(OrdNotMode ~ returnShipment, orders.sample, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Unusual Size?", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
beanplot(sortID$OrdNotMode ~ returnShipment, sortID, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Unusual Size?", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 5000)
orders.sample <- orders.train [sample_ind, ]
custMode <- summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode
# sorting orders by customerID to cbind customer Mode to right observation
r <- order(orders.sample$customerID)
r
sortID <- orders.sample[r,]
sortID
cbind(sortID,custMode[,2])
# Add column to denote whether the order size was not the customer's usual order (size mode)
# had to use custMode column instead of one cbinded in. Not sure why, but this works
sortID$OrdNotMode <- ifelse((sortID$size != custMode[,2]),0,1)
sortID$OrdNotMode
beanplot(sortID$OrdNotMode ~ returnShipment, sortID, side = "b", col = list("yellow", "orange"), border = c("yellow2","darkorange"), main = "Unusual Size?", xaxt="n")
legend("topleft", bty="n",c("Not Returned", "Returned"), fill = c("yellow", "orange"))
orders.train <- read.table("C:/Users/Katie/Google Drive/Predict 498 Capstone/orders_train.txt", header = TRUE, sep = ";")
orders.train <- read.table("C:/Users/Jim Braun/My Documents/Predict 498 Capstone/Data Mining Cup/orders_train.txt", header = TRUE, sep = ";")
# Update date fields to date type instead of factors
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
str(orders.train)
summary(orders.train)
# Add date diff variables
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
orders.train$accountAge <- as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25
orders.train$customerAge <- as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25
# Check
summary(orders.train[15:17])
# timeToDeliver should never be negative, and age should never be negative
orders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)
orders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)
# age should also probably not be > 100 - what should we use for the cut-off?
orders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)
# Recheck
summary(orders.train[15:17])
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 5000)
orders.sample <- orders.train [sample_ind, ]
custMode <- summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode
custMode <- summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode
custMode2 <- summaryBy(customerID ~ size, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode2
max(customerID)
max(orders.sample$customerID)
numObs <- count(orders.sample$customerID)
numObs <- table(orders.sample$customerID)
numObs
tabulate(orders.sample$customerID)
library(plyr)
numObs <- count(orders.sample$customerID)
numObs
set.seed(498)
sample_ind <- sample(seq_len(nrow(orders.train)), size = 1000)
orders.sample <- orders.train [sample_ind, ]
custMode <- summaryBy(size ~ customerID, data=orders.sample, FUN = function (x) {c(m=mfv(x))})
custMode
install.packages("psych")
library(psych)
describe.by(orders.sample, customerID, size)
describe.by(orders.sample, size, customerID)
describeBy(orders.sample, size, customerID)
describeBy(orders.sample, customerID, size)
describeBy(custMode, customerID, size)
describeBy(custMode, group=customerID, mat=FALSE, type=3, digits=3)
describeBy(orders.Sample, group=returnShipment, mat=FALSE, type=3, digits=6)
describeBy(orders.sample, group=returnShipment, mat=FALSE, type=3, digits=6)
describeBy(orders.sample, group=orders.sample$returnShipment, mat=FALSE, type=3, digits=6)
mfv(size, group=customerID)
mfv(orders.sample$size, group=orders.sample$customerID)
mfv(orders.sample$size)
myfun<-function(x){mvf(x)}
summaryBy(orders.sample$size~orders.sample$customerID, data=orders.sample, FUN=myfun)
myfun<-function(x){mfv(x)}
summaryBy(orders.sample$size~orders.sample$customerID, data=orders.sample, FUN=myfun)
OB<-orderBy(~orders.sample$customerID+orders.sample$size, data=orders.sample)
OM <- function(d){c(NA,mfvorders.sample$size)}
v<-lapplyBy(~orders.sample$customerID, data=orders.sample, OM)
orders.sample$OM <-unlist(v)
data(orders.sample)
OB <- orderBy(~orders.sample$customerID+orders.sample$size, data=orders.sample)
OM <- function(d){c(NA,mfvorders.sample$size)}
v<-lapplyBy(~orders.sample$customerID, data=orders.sample, OM)
orders.sample$OM <-unlist(v)
OB <- orderBy(~orders.sample$customerID+orders.sample$size, data=orders.sample)
OM <- function(d){c(NA,mfv(orders.sample$size)}
v<-lapplyBy(~orders.sample$customerID, data=orders.sample, OM)
orders.sample$OM <-unlist(v)
