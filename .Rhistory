summary(riskyManuf$returnShipment.mean)
summary(riskyManuf$returnShipment.length)
summary(riskyManuf[which(riskyManuf$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyManuf$manufRiskFlag <- ifelse(riskyManuf$returnShipment.length>=50 & riskyManuf$returnShipment.mean >=0.5573,1,0)
names(riskyManuf) <- c("manufacturerID","numManufOrders","numManufReturns","manufRiskFlag")
# Merge
orders.train <- merge(orders.train,riskyManuf,by="manufacturerID")
# Items
riskyItems <- summaryBy(returnShipment ~ itemID,orders.train,FUN=c(length,mean))
summary(riskyItems$returnShipment.mean)
summary(riskyItems$returnShipment.length)
summary(riskyItems[which(riskyItems$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyItems$itemRiskFlag <- ifelse(riskyItems$returnShipment.length>=50 & riskyItems$returnShipment.mean >=0.5938,1,0)
names(riskyItems) <- c("itemID","numItemOrders","numItemReturns","itemRiskFlag")
# Merge
orders.train <- merge(orders.train,riskyItems,by="itemID")
# Customers
riskyCust <- summaryBy(returnShipment ~ customerID,orders.train,FUN=c(length,mean))
summary(riskyCust$returnShipment.mean)
summary(riskyCust$returnShipment.length)
summary(riskyCust[which(riskyCust$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyCust$custRiskFlag <- ifelse(riskyCust$returnShipment.length>=50 & riskyCust$returnShipment.mean >=0.6667,1,0)
names(riskyCust) <- c("customerID","numCustOrders","numCustReturns","custRiskFlag")
# Merge & clear workspace
orders.train <- merge(orders.train,riskyCust,by="customerID")
remove(riskyManuf,riskyItems,riskyCust)
itemPricing <- merge(summaryBy(price ~ itemID,orders.train,FUN=quantile),
summaryBy(price ~ itemID,orders.train,FUN=mean),by="itemID")
View(itemPricing) # confirmed, going to attach to the orders.train data frame so we can later flag
orders.train <- merge(orders.train, itemPricing, by="itemID")
orders.train$difFromMeanPrice = orders.train$price - orders.train$price.mean
remove(itemPricing)
# Look at mean of returnShipment for each price point
# Currently saving this out as a separate table because I'm not entirely sure what to do with it
returnsByPrice <- summaryBy(returnShipment ~ itemID + price, orders.train, FUN=c(length,mean))
# Create OrderID variable
orders.table <- summaryBy(returnShipment ~ orderDate + customerID, orders.train, FUN=mean)
orders.table$orderID <- 1:nrow(orders.table)
orders.table <- orders.table[,-3]
orders.train <- merge(orders.train,orders.table,by=c("customerID","orderDate"))
remove(orders.table)
str(orders.train)
ks.test(returnShipment~holidayFlag, data=orders.train) # statistically significant
ks.test(returnShipment,holidayFlag, data=orders.train) # statistically significant
ks.test(returnShipment,size, data=orders.train) # statistically significant
ks.test(returnShipment~price, data=orders.train) # statistically significant
ks.test(returnShipment,price, data=orders.train) # statistically significant
ks.test(returnShipment,price) # statistically significant
price0 <- ifelse(returnShipment=0, price, na)
price0 <- if(returnShipment=0, orders.train$price)
price0 <- if(returnShipment==0, orders.train$price)
price0 <- ifelse(returnShipment==0, orders.train$price, rm)
price0 <- ifelse(orders.train$returnShipment==0, orders.train$price, rm)
priceVector <- orders.train$price
price0 <- priceVector(orders.train$returnShipment==0)
price0 <- priceVector(orders.train$returnShipment<1)
price0 <- subset(priceVector, orders.train$returnShipment==0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
ks.test(price0,price1) # statistically significant
price0
shipTime <- orders.train$timeToDeliver
ship0 <- subset(shipTime, orders.train$returnShipment==0)
ship1 <- subset(shipTime, orders.train$returnShipment==1)
ks.test(price0,price1) # statistically significant
remove(price0, price1, priceVector)
remove(ship0, ship1, shipTime) #clean workspace
acctAge <- orders.train$accountAge
acctAge0 <- subset(acctAge, orders.train$returnShipment==0)
acctAge1 <- subset(acctAge, orders.train$returnShipment==1)
ks.test(acctAge0, acctAge1) # statistically significant, not a lot of separation, though
remove(acctAge0, acctAge1, acctAge) #clean workspace
custAge <- orders.train$customerAge
custAge0 <- subset(custAge, orders.train$returnShipment==0)
custAge1 <- subset(custAge, orders.train$returnShipment==1)
ks.test(custAge0, custAge1) # statistically significant, very little separation, though
remove(custAge0, custAge1, custAge) #clean workspace
t.test(returnShipment~price, data=orders.train) # statistically significant
t.test(price~returnShipment, data=orders.train) # statistically significant
t.test(returnShipment~ShoeDress, data=orders.train) # statistically significant
t.test(shoeDress~returnShipment, data=orders.train) # statistically significant
t.test(ShoeDress~returnShipment, data=orders.train) # statistically significant
priceVector <- orders.train$price
price0 <- subset(priceVector, orders.train$returnShipment==0)
p0 <- sort(Price0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
p1 <- sort(price1)
ks.test(p0,p1) # statistically significant, minor-moderate separation
priceVector <- orders.train$price
price0 <- subset(priceVector, orders.train$returnShipment==0)
p0 <- sort(price0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
p1 <- sort(price1)
ks.test(p0,p1) # statistically significant, minor-moderate separation
remove(price0, price1, priceVector, p0, p1) #clean workspace
shipTime <- orders.train$timeToDeliver
ship0 <- subset(shipTime, orders.train$returnShipment==0)
ship1 <- subset(shipTime, orders.train$returnShipment==1)
ks.test(price0,price1) # statistically significant, minor-moderate separation
remove(ship0, ship1, shipTime) #clean workspace
shipTime <- orders.train$timeToDeliver
ship0 <- subset(shipTime, orders.train$returnShipment==0)
ship1 <- subset(shipTime, orders.train$returnShipment==1)
ks.test(ship0,ship1) # statistically significant, minor-moderate separation
remove(ship0, ship1, shipTime) #clean workspace
shipTime <- orders.train$timeToDeliver
ship0 <- subset(shipTime, orders.train$returnShipment==0)
s0 <- sort(ship0)
ship1 <- subset(shipTime, orders.train$returnShipment==1)
s1 <- sort(ship1)
ks.test(price0,price1) # statistically significant, minor-moderate separation
remove(ship0, ship1, shipTime) #clean workspace
shipTime <- orders.train$timeToDeliver
ship0 <- subset(shipTime, orders.train$returnShipment==0)
s0 <- sort(ship0)
ship1 <- subset(shipTime, orders.train$returnShipment==1)
s1 <- sort(ship1)
ks.test(s0,s1) # statistically significant, minor-moderate separation
remove(ship0, ship1, shipTime, s0, s1) #clean workspace
# Number of Items in that day's order - proxy for basket size
numItems <- orders.train$numItemsInOrder
numItems0 <- subset(numItems, orders.train$returnShipment==0)
numItems1 <- subset(numItems, orders.train$returnShipment==1)
ks.test(numItems0, numItems1) # statistically significant, minor separation
remove(numItems0, numItems1, custAge) #clean workspace
# Frequency of returns for that manufacturer
manRet <- orders.train$numManufReturns
manRet0 <- subset(manRet, orders.train$returnShipment==0)
manRet1 <- subset(manRet, orders.train$returnShipment==1)
ks.test(manRet0, manRet1) # statistically significant, moderate - large separation
remove(manRet0, manRet1, manRet) #clean workspace
manOrd <- orders.train$numManufOrders
manOrd0 <- subset(manOrd, orders.train$returnShipment==0)
manOrd1 <- subset(manOrd, orders.train$returnShipment==1)
ks.test(manOrd0, manOrd1) # statistically significant, moderate - large separation
remove(manOrd0, manOrd1, manOrd) #clean workspace
# Frequency of returns for item ordered
itemRet <- orders.train$numItemReturns
itemRet0 <- subset(itemRet, orders.train$returnShipment==0)
itemRet1 <- subset(itemRet, orders.train$returnShipment==1)
ks.test(itemRet0, itemRet1) # statistically significant, moderate - large separation
remove(itemRet0, itemRet1, itemRet) #clean workspace
# Number of orders for item ordered
itemOrd <- orders.train$numItemOrders
itemOrd0 <- subset(itemOrd, orders.train$returnShipment==0)
itemOrd1 <- subset(itemOrd, orders.train$returnShipment==1)
ks.test(itemOrd0, itemOrd1) # statistically significant, minor separation
remove(itemOrd0, itemOrd1, itemOrd) #clean workspace
# Frequency of returns for that Customer
custRet <- orders.train$numCustReturns
custRet0 <- subset(custRet, orders.train$returnShipment==0)
custRet1 <- subset(custRet, orders.train$returnShipment==1)
ks.test(custRet0, custRet1) # statistically significant, VERY large separation
remove(custRet0, custRet1, custRet) #clean workspace
# Number of orders for that Customer
custOrd <- orders.train$numCustOrders
custOrd0 <- subset(custOrd, orders.train$returnShipment==0)
custOrd1 <- subset(custOrd, orders.train$returnShipment==1)
ks.test(custOrd0, custOrd1) # statistically significant, minor - moderate separation
remove(custOrd0, custOrd1, custOrd) #clean workspace
library(ROCR)
library(caret)
smp_size <- floor(0.7 * max(orders.train$orderID))
set.seed(498)
train_ind <- sample(seq_len(max(orders.train$orderID)), size = smp_size)
orders.train$trainTest <- train_ind[orders.train$orderID]
train <- orders.train[which(orders.train$trainTest>0), ]
test <- orders.train[-which(orders.train$trainTest>0), ]
remove(smp_size,train_ind)
returns.lr <- glm(returnShipment ~ color + timeToDeliver
+ salutation + state
+ accountAge + customerAge
+ holidayFlag + bdayFlag
+ LetterSize + Pants + ChildSize + ShoeDress
+ difFromMeanPrice + price
+ numCustOrders + numCustReturns + custRiskFlag
+ numItemReturns + numItemOrders + itemRiskFlag
+ numManufOrders + numManufReturns + manufRiskFlag
family=binomial(link=logit), data=train)
summary(returns.lr)
returns.lr <- glm(returnShipment ~ color + timeToDeliver
+ salutation + state
+ accountAge + customerAge
+ holidayFlag + bdayFlag
+ LetterSize + Pants + ChildSize + ShoeDress
+ difFromMeanPrice + price
+ numCustOrders + numCustReturns + custRiskFlag
+ numItemReturns + numItemOrders + itemRiskFlag
+ numManufOrders + numManufReturns + manufRiskFlag,
family=binomial(link=logit), data=train)
summary(returns.lr)
predict.train.logistic <- predict(returns.lr, train, type="response")
predict.test.logistic <- predict(returns.lr, test, type="response")
train.logistic.pred <- prediction(predict.train.logistic, train$returnShipment)
train.logistic.roc <- performance(train.logistic.pred, "tpr","fpr")
train.logistic.auc <- (performance(train.logistic.pred, "auc"))@y.values
test.logistic.pred <- prediction(predict.test.logistic, test$returnShipment)
test.logistic.roc <- performance(test.logistic.pred, "tpr","fpr")
test.logistic.auc <- (performance(test.logistic.pred, "auc"))@y.values
# plot the full model ROC curves
pdf(file = "LR_model_ROC.pdf", width = 11, height = 8.5)  ##/\open pdf/\##
plot(train.logistic.roc, col = "darkgreen", main = "ROC Curves for Logistic Regression Model")
plot(test.logistic.roc, col = "red",  add = TRUE)
abline(c(0,1))
# Draw a legend.
train.legend <- paste("Train: AUC=", round(train.logistic.auc[[1]], digits=3))
test.legend <- paste("Test : AUC=", round(test.logistic.auc[[1]], digits=3))
legend(0.6, 0.5, c(train.legend,test.legend), c(3,2))
dev.off()
source.with.encoding('~/GitHub/CAPSTONE/Transformations.R', encoding='UTF-8')
priceVector <- orders.train$price
price0 <- subset(priceVector, orders.train$returnShipment==0)
p0 <- sort(price0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
p1 <- sort(price1)
ks.test(p0,p1) # statistically significant, moderate - large separation
plot(ecdf(price0), do.points=FALSE, verticals=T)
lines(ecdf(price1), lty=3, do.points=FALSE, verticals=T)
remove(price0, price1, priceVector, p0, p1) #clean workspace
plot(ecdf(price0), do.points=FALSE, verticals=T, ylab="cumulative distribution function")
lines(ecdf(price1), lty=3, do.points=FALSE, verticals=T)
lines(ecdf(price1), lty=3, do.points=FALSE, verticals=T, ylab="cumulative distribution function")
priceVector <- orders.train$price
price0 <- subset(priceVector, orders.train$returnShipment==0)
p0 <- sort(price0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
p1 <- sort(price1)
ks.test(p0,p1) # statistically significant, moderate - large separation
plot(ecdf(price0), do.points=FALSE, verticals=T)
lines(ecdf(price1), lty=3, do.points=FALSE, verticals=T, ylab="cumulative distribution function")
remove(price0, price1, priceVector, p0, p1) #clean workspace
priceVector <- orders.train$price
price0 <- subset(priceVector, orders.train$returnShipment==0)
p0 <- sort(price0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
p1 <- sort(price1)
ks.test(p0,p1) # statistically significant, moderate - large separation
plot(ecdf(price0), do.points=FALSE, verticals=T, x xlab="price", ylab="cumulative distribution function")
lines(ecdf(price1), lty=3, do.points=FALSE, verticals=T)
remove(price0, price1, priceVector, p0, p1) #clean workspace
priceVector <- orders.train$price
price0 <- subset(priceVector, orders.train$returnShipment==0)
p0 <- sort(price0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
p1 <- sort(price1)
ks.test(p0,p1) # statistically significant, moderate - large separation
plot(ecdf(price0), do.points=FALSE, verticals=T, xlab="price", ylab="cumulative distribution function")
lines(ecdf(price1), lty=3, do.points=FALSE, verticals=T)
remove(price0, price1, priceVector, p0, p1) #clean workspace
priceVector <- orders.train$price
price0 <- subset(priceVector, orders.train$returnShipment==0)
p0 <- sort(price0)
price1 <- subset(priceVector, orders.train$returnShipment==1)
p1 <- sort(price1)
ks.test(p0,p1) # statistically significant, moderate - large separation
plot(ecdf(price0), do.points=FALSE, verticals=T, xlab="price", ylab="cumulative distribution", main="K-S Plot")
lines(ecdf(price1), lty=3, do.points=FALSE, verticals=T)
remove(price0, price1, priceVector, p0, p1) #clean workspace
shipTime <- orders.train$timeToDeliver
ship0 <- subset(shipTime, orders.train$returnShipment==0)
ship1 <- subset(shipTime, orders.train$returnShipment==1)
ks.test(ship0,ship1) # statistically significant, minor separation
plot(ecdf(ship0), do.points=FALSE, verticals=T, xlab="Delivery Time", ylab="cumulative distribution", main="K-S Plot")
lines(ecdf(ship1), lty=3, do.points=FALSE, verticals=T)
remove(ship0, ship1, shipTime) #clean workspace
library(doBy)
library(ggplot2)
library(mice)
library(plyr)
# Read in data from GitHub
orders.train <- read.table("orders_train.txt", header = TRUE, sep = ";")
#Read in our color mapping
colorMap <- read.table("Color mapping.csv", header = TRUE, sep = ",", as.is = TRUE)
# Update date fields to date type instead of factors
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
# Recode ? to NA for color
orders.train$color <- mapvalues(orders.train$color, from = colorMap$original.color, to = colorMap$mapped)
orders.train$color[orders.train$color =="?"] <- NA
# Recode "not reported" to NA for salutation
orders.train$salutation[orders.train$salutation =="not reported"] <- NA
#Rows with missing delivery dates we are assuming were not delivered, take them out
orders.train <- orders.train[!(is.na(orders.train$deliveryDate)),]
#Identify 'high risk' and 'low risk' sizes
orders.train$sizeHighRisk <- orders.train$size == '40' | orders.train$size == '41'  | orders.train$size == '42'
orders.train$sizeLowRisk <- orders.train$size == 'unsized'
load("~/GitHub/CAPSTONE/ImputedOrders.RData")
# Add date diff variables
# Time from when order was placed to delivery, in days
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
# Age of the account, in years but rounded to nearest tenth- seemed like a continuous variable was overkill here
orders.train$accountAge <- round(as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25,1)
# want customer's age as an integer, similar to when you ask how old someone is
orders.train$customerAge <- floor(as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25)
# Check
# summary(orders.train[15:17])
# timeToDeliver should never be negative, and age should never be negative
orders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)
orders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)
# age should also probably not be > 100 - what should we use for the cut-off?
orders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)
# Recheck
# Sizing recodes - creating a table with frequencies to work from and going to remove sizes as I recode them
# There may be some errors here- for example, Euro children's sizes start at 50, but some conversions go up to size 52 for men's suits, etc
##### not sure how many items this affects, but we could check the range of values for those items to see which class they belong to?
size.table <- summaryBy(size ~ size,orders.train,FUN=length)
View(size.table)
# Ones that seem like US sizes
orders.train$sizeLetter <- ifelse(as.character(orders.train$size)>"a",toupper(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.character(size.table$size)>"a"),]
orders.train$sizePant <- ifelse(as.numeric(as.character(orders.train$size))>2900,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>2900),]
# Euro children's sizes go from 50-188
# http://www.ebay.com/gds/Guide-to-Understanding-European-Clothing-Sizes-/10000000007740616/g.html
orders.train$sizeChild <- ifelse(as.numeric(as.character(orders.train$size))>=50 & as.numeric(as.character(orders.train$size))<=188,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]
#  Maybe sizes < 20 are US type sizes - either for shoes or women's dresses
#  both are difficult to size without trying on
orders.train$sizeShoeDress <- ifelse(as.numeric(as.character(orders.train$size))>=1 & as.numeric(as.character(orders.train$size))<=20,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=1 & as.numeric(as.character(size.table$size))<=20),]
# Remaining
orders.train$sizeOther <- ifelse(is.na(orders.train$sizeLetter) & is.na(orders.train$sizePant) & is.na(orders.train$sizeChild) & is.na(orders.train$sizeShoeDress), as.character(orders.train$size),NA)
# check
table(orders.train$sizeLetter)
table(orders.train$sizePant)
table(orders.train$sizeChild)
table(orders.train$sizeShoeDress)
table(orders.train$sizeOther)
#table(orders.train$sizePlus)
# Identification Markers for various clothing type
orders.train$LetterSize <- ifelse(is.na(orders.train$sizeLetter),0,1)
orders.train$Pants <- ifelse(is.na(orders.train$sizePant),0,1)
orders.train$ChildSize <- ifelse(is.na(orders.train$sizeChild),0,1)
orders.train$ShoeDress <- ifelse(is.na(orders.train$sizeShoeDress),0,1)
#orders.train$PlusSize <- ifelse(is.na(orders.train$sizePlus),0,1)
# Add holiday/bday flags
# NOTE: ALL OBS ARE MARKED '1' FOR BDAY
orders.train$holidayFlag <- ifelse(as.character(orders.train$orderDate,format="%m%d")>="1125" &
as.character(orders.train$orderDate,format="%m%d")<="1230",1,0)
orders.train$bdayFlag <- ifelse(as.character(orders.train$orderDate,format="%m%d")>=as.character(orders.train$dateOfBirth-30,format="%m%d") &
as.character(orders.train$orderDate,format="%m%d")<=as.character(orders.train$dateOfBirth+5,format="%m%d"),1,0)
# Need to address cases at the beginning/end of the year
# Get count of bdayFlags for comparison in next step
summaryBy(bdayFlag ~ 1, orders.train, FUN=sum, na.rm=T)
# Bdays after 12/26 or before 1/31 - the order date can be until the end of the year and part of the next
orders.train$bdayFlag <- ifelse((as.character(orders.train$dateOfBirth,format="%m%d")>"1226"|as.character(orders.train$dateOfBirth,format="%m%d")<="0130") &
(as.character(orders.train$orderDate,format="%m%d")>=as.character(orders.train$dateOfBirth-30,format="%m%d") | as.numeric(as.character(orders.train$orderDate,format="%m%d"))<=as.numeric(as.character(orders.train$dateOfBirth+5,format="%m%d"))),1,orders.train$bdayFlag)
summaryBy(bdayFlag ~ 1, orders.train, FUN=sum, na.rm=T)
# Visually check some of these - appears to be working correctly
View(orders.train[which(orders.train$bdayFlag==1 & (as.character(orders.train$orderDate,format="%m%d")<"0104" | as.character(orders.train$orderDate,format="%m%d")>"1215")),])
# Add number of items per order
numItems <- summaryBy(orderItemID ~ customerID + orderDate, orders.train, FUN=length)
names(numItems) <- c("customerID","orderDate","numItemsInOrder")
orders.train <- merge(orders.train,numItems,by=c("customerID","orderDate"))
# Add num items with that items ID per order
# Also looking at number of returns since we expect higher returns if they order dups
dupItems <- summaryBy(returnShipment ~ customerID + orderDate + itemID, orders.train, FUN=c(length,sum))
names(dupItems) <- c("customerID","orderDate","itemID","numItemID","numItemIDReturned")
# Check hypothesis
summaryBy(numItemIDReturned ~ numItemID, dupItems, FUN=c(length,median,mean))
# Leaving out number returned when merging back in because we don't want to accidentally include as a predictor
orders.train <- merge(orders.train,dupItems[1:4],by=c("customerID","orderDate","itemID"))
# Dropping unnecessary data frames
remove(numItems,dupItems)
# Find high risk manufacturers/items/customers
# Do we want to only include ones that had a certain number of items ordered?
# I picked 50 as a cutoff, but that's arbitrary; could use median or a percentile
# Manufacturers
riskyManuf <- summaryBy(returnShipment ~ manufacturerID,orders.train,FUN=c(length,mean))
summary(riskyManuf$returnShipment.mean)
summary(riskyManuf$returnShipment.length)
summary(riskyManuf[which(riskyManuf$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyManuf$manufRiskFlag <- ifelse(riskyManuf$returnShipment.length>=50 & riskyManuf$returnShipment.mean >=0.5573,1,0)
names(riskyManuf) <- c("manufacturerID","numManufOrders","numManufReturns","manufRiskFlag")
# Merge
orders.train <- merge(orders.train,riskyManuf,by="manufacturerID")
# Items
riskyItems <- summaryBy(returnShipment ~ itemID,orders.train,FUN=c(length,mean))
summary(riskyItems$returnShipment.mean)
summary(riskyItems$returnShipment.length)
summary(riskyItems[which(riskyItems$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyItems$itemRiskFlag <- ifelse(riskyItems$returnShipment.length>=50 & riskyItems$returnShipment.mean >=0.5938,1,0)
names(riskyItems) <- c("itemID","numItemOrders","numItemReturns","itemRiskFlag")
# Merge
orders.train <- merge(orders.train,riskyItems,by="itemID")
# Customers
riskyCust <- summaryBy(returnShipment ~ customerID,orders.train,FUN=c(length,mean))
summary(riskyCust$returnShipment.mean)
summary(riskyCust$returnShipment.length)
summary(riskyCust[which(riskyCust$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyCust$custRiskFlag <- ifelse(riskyCust$returnShipment.length>=50 & riskyCust$returnShipment.mean >=0.6667,1,0)
names(riskyCust) <- c("customerID","numCustOrders","numCustReturns","custRiskFlag")
# Merge & clear workspace
orders.train <- merge(orders.train,riskyCust,by="customerID")
remove(riskyManuf,riskyItems,riskyCust)
# Check if items are always the same price (expect they're not, but wanted to verify before coding more)
# Using a merge because if I try to do quantile and mean in 1 step, the labels aren't clear
itemPricing <- merge(summaryBy(price ~ itemID,orders.train,FUN=quantile),
summaryBy(price ~ itemID,orders.train,FUN=mean),by="itemID")
View(itemPricing) # confirmed, going to attach to the orders.train data frame so we can later flag
orders.train <- merge(orders.train, itemPricing, by="itemID")
orders.train$difFromMeanPrice = orders.train$price - orders.train$price.mean
remove(itemPricing)
# Look at mean of returnShipment for each price point
# Currently saving this out as a separate table because I'm not entirely sure what to do with it
returnsByPrice <- summaryBy(returnShipment ~ itemID + price, orders.train, FUN=c(length,mean))
# Create OrderID variable
orders.table <- summaryBy(returnShipment ~ orderDate + customerID, orders.train, FUN=mean)
orders.table$orderID <- 1:nrow(orders.table)
orders.table <- orders.table[,-3]
orders.train <- merge(orders.train,orders.table,by=c("customerID","orderDate"))
remove(orders.table)
str(orders.train)
library(ROCR)
library(caret)
smp_size <- floor(0.7 * max(orders.train$orderID))
set.seed(498)
train_ind <- sample(seq_len(max(orders.train$orderID)), size = smp_size)
orders.train$trainTest <- train_ind[orders.train$orderID]
train <- orders.train[which(orders.train$trainTest>0), ]
test <- orders.train[-which(orders.train$trainTest>0), ]
remove(smp_size,train_ind)
remove(orders.train) # To clean workspace for 'hungry' algorithms
returns.lr <- glm(returnShipment ~ color + timeToDeliver
+ salutation + state
+ accountAge + customerAge
+ holidayFlag + bdayFlag
+ LetterSize + Pants + ChildSize + ShoeDress
+ difFromMeanPrice + price
+ numCustOrders + numCustReturns + custRiskFlag
+ numItemReturns + numItemOrders + itemRiskFlag
+ numManufOrders + numManufReturns + manufRiskFlag,
family=binomial(link=logit), data=train)
summary(returns.lr)
predict.train.logistic <- predict(returns.lr, train, type="response")
predict.test.logistic <- predict(returns.lr, test, type="response")
train.logistic.pred <- prediction(predict.train.logistic, train$returnShipment)
train.logistic.roc <- performance(train.logistic.pred, "tpr","fpr")
train.logistic.auc <- (performance(train.logistic.pred, "auc"))@y.values
test.logistic.pred <- prediction(predict.test.logistic, test$returnShipment)
test.logistic.roc <- performance(test.logistic.pred, "tpr","fpr")
test.logistic.auc <- (performance(test.logistic.pred, "auc"))@y.values
# plot the full model ROC curves
pdf(file = "LR_model_ROC.pdf", width = 11, height = 8.5)  ##/\open pdf/\##
plot(train.logistic.roc, col = "darkgreen", main = "ROC Curves for Logistic Regression Model")
plot(test.logistic.roc, col = "red",  add = TRUE)
abline(c(0,1))
# Draw a legend.
train.legend <- paste("Train: AUC=", round(train.logistic.auc[[1]], digits=3))
test.legend <- paste("Test : AUC=", round(test.logistic.auc[[1]], digits=3))
legend(0.6, 0.5, c(train.legend,test.legend), c(3,2))
dev.off()
predictions<-cut(predict.test.logistic, c(-Inf,0.4,Inf), labels=c("Keep","Return"))
# Now have a look - classes are assigned
str(predictions)
summary(predictions)
# compare to test$pick to ensure same # of levels and obs
# Need to impute or eliminate observations with NAs or else have above issue
str(test$returnShipment)
summary(test$returnShipment)
confusionMatrix(predictions, test$returnShipment)
str(predictions)
str(test$returnShipment)
summary(predictions)
#clean workspace for next algorithm
remove(predict.test.logistic, predict.train.logistic, predictions, returns.lr,
test.logistic.auc, test.logistic.pred, test.logistic.roc,
train.logistic.roc, train.logistic.pred, train.logistic.auc)
remove(predict.test.logistic, predict.train.logistic, predictions, returns.lr,
test.logistic.auc, test.logistic.pred, test.logistic.roc,
train.logistic.roc, train.logistic.pred, train.logistic.auc,
test.legend,train.legend)
# J48 (based on Quinlan's C4.5)
library(RWeka)
# to run j48 in RWeka
# Careful this takes a few minutes!
remove(orders.train) # clean space
# J48 cannot handle numeric class - have to convert to factor
RS <- as.factor(train$returnShipment)
returns_j48 <- J48(RS ~ color + timeToDeliver
+ salutation + state
+ accountAge + customerAge
+ holidayFlag + bdayFlag
+ LetterSize + Pants + ChildSize + ShoeDress
+ difFromMeanPrice + price
+ numCustOrders + numCustReturns + custRiskFlag
+ numItemReturns + numItemOrders + itemRiskFlag
+ numManufOrders + numManufReturns + manufRiskFlag,
data=train)
returns_j48
summary(returns_j48)
RS <- as.factor(test$returnShipment)
train.J48.pred <- prediction(predict.train.J48, train$RS)
train.J48.roc <- performance(train.J48.pred, "tpr","fpr")
train.J48.auc <- (performance(train.J48.pred, "auc"))@y.values
predict.train.J48 <- predict(returns_j48, train, type="probability")
predict.test.J48 <- predict(returns_j48, test, type="probability")
train.J48.pred <- prediction(predict.train.J48, train$RS)
RS <- as.numeric(test$returnShipment)
predict.train.J48 <- predict(returns_j48, train, type="probability")
predict.test.J48 <- predict(returns_j48, test, type="probability")
train.J48.pred <- prediction(predict.train.J48, train$RS)
train.J48.roc <- performance(train.J48.pred, "tpr","fpr")
train.J48.auc <- (performance(train.J48.pred, "auc"))@y.values
RS <- as.factor(train$returnShipment)
