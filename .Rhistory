size.table <- summaryBy(size ~ size,orders.train,FUN=length)
View(size.table)
orders.train$sizeLetter <- ifelse(as.character(orders.train$size)>"a",toupper(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.character(size.table$size)>"a"),]
orders.train$sizePant <- ifelse(as.numeric(as.character(orders.train$size))>2900,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>2900),]
# Euro children's sizes go from 50-188
# http://www.ebay.com/gds/Guide-to-Understanding-European-Clothing-Sizes-/10000000007740616/g.html
orders.train$sizeChild <- ifelse(as.numeric(as.character(orders.train$size))>=50 & as.numeric(as.character(orders.train$size))<=188,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]
# Remaining
orders.train$sizeOther <- ifelse(is.na(orders.train$sizeLetter) & is.na(orders.train$sizePant) & is.na(orders.train$sizeChild),as.character(orders.train$size),NA)
# check
table(orders.train$sizeLetter)
table(orders.train$sizePant)
table(orders.train$sizeChild)
table(orders.train$sizeOther)
library(doBy)
library(ggplot2)
# Read in data from GitHub
orders.train <- read.table("orders_train.txt", header = TRUE, sep = ";")
str(orders.train)
# Update date fields to date type instead of factors
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
orders.train[-which(orders.train$orderItemID!=orders.train$row.names),]
item.check <- summaryBy(manufacturerID ~ itemID, orders.train, FUN=c(min,max))
item.check[-which(item.check$manufacturerID.min==item.check$manufacturerID.max),]
View(orders.train[which(orders.train$itemID==c(1627,1682,1696,2252)),])
View(item.check)
View(item.check)
View(item.check)
binom.test(73, 145, p = .48, alternative = c("two.sided"), conf.level = 0.90)
binom.test(73, 145, p = .48, alternative = c("two.sided"), conf.level = 0.95)
binom.test(73, 145, p = .4824, alternative = c("two.sided"), conf.level = 0.95)
binom.test(71, 145, p = .4824, alternative = c("two.sided"), conf.level = 0.95)
binom.test(7, 145, p = .4824, alternative = c("two.sided"), conf.level = 0.95)
binom.test(73, 145, p = .4824, alternative = c("two.sided"), conf.level = 0.95)
item.check
remove(item.check)
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
# Age of the account, in years but rounded to nearest tenth- seemed like a continuous variable was overkill here
orders.train$accountAge <- round(as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25,1)
# want customer's age as an integer, similar to when you ask how old someone is
orders.train$customerAge <- floor(as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25)
# Check
orders.train$color <- ifelse(orders.train$color=="?",NA,orders.train$color)
# Recode "not reported" to NA for salutation
orders.train$salutation <- ifelse(orders.train$salutation=="not reported",NA,orders.train$salutation)
size.table <- summaryBy(size ~ size,orders.train,FUN=length)
View(size.table)
orders.train$sizeLetter <- ifelse(as.character(orders.train$size)>"a",toupper(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.character(size.table$size)>"a"),]
orders.train$sizePant <- ifelse(as.numeric(as.character(orders.train$size))>2900,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>2900),]
View(size.table)
orders.train$sizeChild <- ifelse(as.numeric(as.character(orders.train$size))>=50 & as.numeric(as.character(orders.train$size))<=188,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]
# Remaining
orders.train$sizeOther <- ifelse(is.na(orders.train$sizeLetter) & is.na(orders.train$sizePant) & is.na(orders.train$sizeChild),as.character(orders.train$size),NA)
table(orders.train$sizeLetter)
table(orders.train$sizePant)
table(orders.train$sizeChild)
table(orders.train$sizeOther)
orders.train$sizeShoeDress <- ifelse(as.numeric(as.character(orders.train$size))>=0 & as.numeric(as.character(orders.train$size))<=20,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=0 & as.numeric(as.character(size.table$size))<=20),]
orders.train$sizeShoeDress <- ifelse(as.numeric(as.character(orders.train$size))>=1 & as.numeric(as.character(orders.train$size))<=20,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=1 & as.numeric(as.character(size.table$size))<=20),]
table(orders.train$sizeShoeDress)
dupItems <- summaryBy(returnShipment ~ customerID + orderDate + itemID, orders.train, FUN=c(length,sum))
names(dupItems) <- c("customerID","orderDate","itemID","numItemID","numItemIDReturned")
summaryBy(numItemIDReturned ~ numItemID, dupItems, FUN=c(length,median,mean))
library(doBy)
library(ggplot2)
# Read in data from GitHub
orders.train <- read.table("orders_train.txt", header = TRUE, sep = ";")
str(orders.train)
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
# Summary data for the QA report
summary(orders.train$orderDate)
summary(orders.train$deliveryDate)
summary(orders.train$creationDate)
summary(orders.train$dateOfBirth)
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
# Age of the account, in years but rounded to nearest tenth- seemed like a continuous variable was overkill here
orders.train$accountAge <- round(as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25,1)
# want customer's age as an integer, similar to when you ask how old someone is
orders.train$customerAge <- floor(as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25)
# Check
orders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)
orders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)
# age should also probably not be > 100 - what should we use for the cut-off?
orders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)
# Recode ? to NA for color
orders.train$color <- ifelse(orders.train$color=="?",NA,orders.train$color)
# Recode "not reported" to NA for salutation
orders.train$salutation <- ifelse(orders.train$salutation=="not reported",NA,orders.train$salutation)
# Ones that seem like US sizes
orders.train$sizeLetter <- ifelse(as.character(orders.train$size)>"a",toupper(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.character(size.table$size)>"a"),]
orders.train$sizePant <- ifelse(as.numeric(as.character(orders.train$size))>2900,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>2900),]
# Euro children's sizes go from 50-188
# http://www.ebay.com/gds/Guide-to-Understanding-European-Clothing-Sizes-/10000000007740616/g.html
orders.train$sizeChild <- ifelse(as.numeric(as.character(orders.train$size))>=50 & as.numeric(as.character(orders.train$size))<=188,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]
#  Last idea is that maybe sizes < 20 are US type sizes - either for shoes or women's dresses
#  both are difficult to size without trying on
orders.train$sizeShoeDress <- ifelse(as.numeric(as.character(orders.train$size))>=1 & as.numeric(as.character(orders.train$size))<=20,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=1 & as.numeric(as.character(size.table$size))<=20),]
# Remaining
orders.train$sizeOther <- ifelse(is.na(orders.train$sizeLetter) & is.na(orders.train$sizePant) & is.na(orders.train$sizeChild) & is.na(orders.train$sizeShoeDress), as.character(orders.train$size),NA)
size.table <- summaryBy(size ~ size,orders.train,FUN=length)
View(size.table)
orders.train$sizeLetter <- ifelse(as.character(orders.train$size)>"a",toupper(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.character(size.table$size)>"a"),]
orders.train$sizePant <- ifelse(as.numeric(as.character(orders.train$size))>2900,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>2900),]
# Euro children's sizes go from 50-188
# http://www.ebay.com/gds/Guide-to-Understanding-European-Clothing-Sizes-/10000000007740616/g.html
orders.train$sizeChild <- ifelse(as.numeric(as.character(orders.train$size))>=50 & as.numeric(as.character(orders.train$size))<=188,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]
orders.train$sizeShoeDress <- ifelse(as.numeric(as.character(orders.train$size))>=1 & as.numeric(as.character(orders.train$size))<=20,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=1 & as.numeric(as.character(size.table$size))<=20),]
# Remaining
orders.train$sizeOther <- ifelse(is.na(orders.train$sizeLetter) & is.na(orders.train$sizePant) & is.na(orders.train$sizeChild) & is.na(orders.train$sizeShoeDress), as.character(orders.train$size),NA)
table(orders.train$sizeLetter)
table(orders.train$sizePant)
table(orders.train$sizeChild)
table(orders.train$sizeShoeDress)
table(orders.train$sizeOther)
orders.train$sizePlus <- ifelse(as.character(orders.train$size)='2+' & as.character(orders.train$size)='3+' & as.character(orders.train$size)='4+' & as.character(orders.train$size)='5+'
& as.character(orders.train$size)='6+' & as.character(orders.train$size)='7+' & as.character(orders.train$size)='8+' & as.character(orders.train$size)='9+'
& as.character(orders.train$size)='10+' & as.character(orders.train$size)='11+' & as.character(orders.train$size)='12+' & as.character(orders.train$size)='13+',
as.character(orders.train$size), NA)
orders.train$sizePlus <- ifelse(as.numeric(as.character(orders.train$size))='2+' & as.numeric(as.character(orders.train$size))='3+' & as.numeric(as.character(orders.train$size))='4+' & as.numeric(as.character(orders.train$size))='5+'
& as.numeric(as.character(orders.train$size))='6+' & as.numeric(as.character(orders.train$size))='7+' & as.numeric(as.character(orders.train$size))='8+' & as.numeric(as.character(orders.train$size))='9+'
& as.numeric(as.character(orders.train$size))='10+' & as.numeric(as.character(orders.train$size))='11+' & as.numeric(as.character(orders.train$size))='12+' & as.numeric(as.character(orders.train$size))='13+',
as.numeric(as.character(orders.train$size)), NA)
orders.train$sizePlus <- ifelse(as.numeric(as.character(orders.train$size))='2+' & as.numeric(as.character(orders.train$size))='3+' & as.numeric(as.character(orders.train$size))='4+' & as.numeric(as.character(orders.train$size))='5+'
& as.numeric(as.character(orders.train$size))='6+' & as.numeric(as.character(orders.train$size))='7+' & as.numeric(as.character(orders.train$size))='8+' & as.numeric(as.character(orders.train$size))='9+'
& as.numeric(as.character(orders.train$size))='10+' & as.numeric(as.character(orders.train$size))='11+' & as.numeric(as.character(orders.train$size))='12+' & as.numeric(as.character(orders.train$size))='13+',
as.numeric(as.character(orders.train$size)), NA)
orders.train$sizePlus <- ifelse(as.character(orders.train$size)="2+" & as.character(orders.train$size)="3+" & as.character(orders.train$size)="4+" & as.character(orders.train$size)="5+"
& as.character(orders.train$size)="6+" & as.character(orders.train$size)="7+" & as.character(orders.train$size)="8+" & as.character(orders.train$size)="9+"
& as.character(orders.train$size)="10+" & as.character(orders.train$size)="11+" & as.character(orders.train$size)="12+" & as.character(orders.train$size)="13+",
as.character(orders.train$size), NA)
orders.train$sizePlus <- ifelse(as.character(orders.train$size)=='2+' & as.character(orders.train$size)=='3+' & as.character(orders.train$size)=='4+' & as.character(orders.train$size)=='5+'
& as.character(orders.train$size)=='6+' & as.character(orders.train$size)=='7+' & as.character(orders.train$size)=='8+' & as.character(orders.train$size)=='9+'
& as.character(orders.train$size)=='10+' & as.character(orders.train$size)=='11+' & as.character(orders.train$size)=='12+' & as.character(orders.train$size)=='13+',
as.character(orders.train$size), NA)
table(orders.train$sizePlus)
orders.train$sizePlus <- ifelse(as.numeric(as.character(orders.train$size))=='2+' & as.numeric(as.character(orders.train$size))=='3+' & as.numeric(as.character(orders.train$size))=='4+' & as.numeric(as.character(orders.train$size))=='5+'
& as.numeric(as.character(orders.train$size))=='6+' & as.numeric(as.character(orders.train$size))=='7+' & as.numeric(as.character(orders.train$size))=='8+' & as.numeric(as.character(orders.train$size))=='9+'
& as.numeric(as.character(orders.train$size))=='10+' & as.numeric(as.character(orders.train$size))=='11+' & as.numeric(as.character(orders.train$size))=='12+' & as.numeric(as.character(orders.train$size))=='13+',
as.numeric(as.character(orders.train$size)), NA)
warnings()
table(orders.train$sizePlus)
orders.train$sizePlus <- ifelse(as.character(orders.train$size)=='2+' & as.character(orders.train$size)=='3+' & as.character(orders.train$size)=='4+' & as.character(orders.train$size)=='5+'
& as.character(orders.train$size)=='6+' & as.character(orders.train$size)=='7+' & as.character(orders.train$size)=='8+' & as.character(orders.train$size)=='9+'
& as.character(orders.train$size)=='10+' & as.character(orders.train$size)=='11+' & as.character(orders.train$size)=='12+' & as.character(orders.train$size)=='13+',
as.character(orders.train$size), NA)
size.table <- size.table[-which(as.character(orders.train$size)=='2+' & as.character(orders.train$size)=='3+' & as.character(orders.train$size)=='4+' & as.character(orders.train$size)=='5+'
& as.character(orders.train$size)=='6+' & as.character(orders.train$size)=='7+' & as.character(orders.train$size)=='8+' & as.character(orders.train$size)=='9+'
& as.character(orders.train$size)=='10+' & as.character(orders.train$size)=='11+' & as.character(orders.train$size)=='12+' & as.character(orders.train$size)=='13+',]
size.table <- size.table[-which(as.character(orders.train$size)=='2+' & as.character(orders.train$size)=='3+' & as.character(orders.train$size)=='4+' & as.character(orders.train$size)=='5+'
& as.character(orders.train$size)=='6+' & as.character(orders.train$size)=='7+' & as.character(orders.train$size)=='8+' & as.character(orders.train$size)=='9+'
& as.character(orders.train$size)=='10+' & as.character(orders.train$size)=='11+' & as.character(orders.train$size)=='12+' & as.character(orders.train$size)=='13+'),]
table(orders.train$sizePlus)
orders.train$sizePlus <- ifelse(as.numeric(as.character(orders.train$size))=='2+' & as.numeric(as.character(orders.train$size))=='3+' & as.numeric(as.character(orders.train$size))=='4+' & as.numeric(as.character(orders.train$size))=='5+'
& as.numeric(as.character(orders.train$size))=='6+' & as.numeric(as.character(orders.train$size))=='7+' & as.numeric(as.character(orders.train$size))=='8+' & as.numeric(as.character(orders.train$size))=='9+'
& as.numeric(as.character(orders.train$size))=='10+' & as.numeric(as.character(orders.train$size))=='11+' & as.numeric(as.character(orders.train$size))=='12+' & as.numeric(as.character(orders.train$size))=='13+',
as.numeric(as.character(orders.train$size)), NA)
size.table <- size.table[-which(as.character(orders.train$size)=='2+' & as.character(orders.train$size)=='3+' & as.character(orders.train$size)=='4+' & as.character(orders.train$size)=='5+'
& as.character(orders.train$size)=='6+' & as.character(orders.train$size)=='7+' & as.character(orders.train$size)=='8+' & as.character(orders.train$size)=='9+'
& as.character(orders.train$size)=='10+' & as.character(orders.train$size)=='11+' & as.character(orders.train$size)=='12+' & as.character(orders.train$size)=='13+'),]
table(orders.train$sizePlus)
table(orders.train$sizeOther)
# Add mode function - note that this only gives one mode if there is more than one
mymode <- function(x){
names(sort(-table(as.character(x))))[1]
}
custMode1 <- summaryBy(toupper(as.character(orders.train$size)) ~ orders.train$customerID, orders.train, FUN=mymode)
custMode2 <- summaryBy(sizeLetter ~ customerID, orders.train[-which(is.na(orders.train$sizeLetter)),], FUN=mymode)
custMode3 <- summaryBy(sizePant ~ customerID, orders.train[-which(is.na(orders.train$sizePant)),], FUN=mymode)
custMode4 <- summaryBy(sizeChild ~ customerID, orders.train[-which(is.na(orders.train$sizeChild)),], FUN=mymode)
custMode5 <- summaryBy(sizeOther ~ customerID, orders.train[-which(is.na(orders.train$sizeOther)),], FUN=mymode)
custMode <- merge(custMode1,custMode2,by="customerID",all=T)
custMode <- merge(custMode,custMode3,by="customerID",all=T)
custMode <- merge(custMode,custMode4,by="customerID",all=T)
custMode <- merge(custMode,custMode5,by="customerID",all=T)
names(custMode) <- c("customerID","sizeMode","szLetterMode","szPantMode", "szChildMode", "szOtherMode")
# Merge back into original file, then drop the unnecessary data frames to clean up the workspace
##### Should we be looking at mode for each clothing type, and just noting if the next order does not belong to that mode for that type,
##### or is this just getting too complicated?
orders.train <- merge(orders.train,custMode,by="customerID",all=T)
remove(custMode,custMode1,custMode2,custMode3,custMode4,custMode5,size.table)
orders.train$holidayFlag <- ifelse(as.character(orders.train$orderDate,format="%m%d")>="1125" &
as.character(orders.train$orderDate,format="%m%d")<="1230",1,0)
orders.train$bdayFlag <- ifelse(as.character(orders.train$orderDate,format="%m%d")>=as.character(orders.train$dateOfBirth-30,format="%m%d") &
as.character(orders.train$orderDate,format="%m%d")<=as.character(orders.train$dateOfBirth+5,format="%m%d"),1,0)
# Need to address cases at the beginning/end of the year
# Get count of bdayFlags for comparison in next step
summaryBy(bdayFlag ~ 1, orders.train, FUN=sum, na.rm=T)
# Bdays after 12/26 or before 1/31 - the order date can be until the end of the year and part of the next
orders.train$bdayFlag <- ifelse((as.character(orders.train$dateOfBirth,format="%m%d")>"1226"|as.character(orders.train$dateOfBirth,format="%m%d")<="0130") &
(as.character(orders.train$orderDate,format="%m%d")>=as.character(orders.train$dateOfBirth-30,format="%m%d") | as.numeric(as.character(orders.train$orderDate,format="%m%d"))<=as.numeric(as.character(orders.train$dateOfBirth+5,format="%m%d"))),1,orders.train$bdayFlag)
summaryBy(bdayFlag ~ 1, orders.train, FUN=sum, na.rm=T)
# Visually check some of these - appears to be working correctly
View(orders.train[which(orders.train$bdayFlag==1 & (as.character(orders.train$orderDate,format="%m%d")<"0104" | as.character(orders.train$orderDate,format="%m%d")>"1215")),])
numItems <- summaryBy(orderItemID ~ customerID + orderDate, orders.train, FUN=length)
names(numItems) <- c("customerID","orderDate","numItemsInOrder")
orders.train <- merge(orders.train,numItems,by=c("customerID","orderDate"))
# Add num items with that items ID per order
# Also looking at number of returns since we expect higher returns if they order dups
dupItems <- summaryBy(returnShipment ~ customerID + orderDate + itemID, orders.train, FUN=c(length,sum))
names(dupItems) <- c("customerID","orderDate","itemID","numItemID","numItemIDReturned")
# Check hypothesis
summaryBy(numItemIDReturned ~ numItemID, dupItems, FUN=c(length,median,mean))
# Leaving out number returned when merging back in because we don't want to accidentally include as a predictor
orders.train <- merge(orders.train,dupItems[1:4],by=c("customerID","orderDate","itemID"))
# Dropping unnecessary data frames
remove(numItems,dupItems)
riskyManuf <- summaryBy(returnShipment ~ manufacturerID,orders.train,FUN=c(length,mean))
summary(riskyManuf$returnShipment.mean)
summary(riskyManuf$returnShipment.length)
summary(riskyManuf[which(riskyManuf$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyManuf$manufRiskFlag <- ifelse(riskyManuf$returnShipment.length>=50 & riskyManuf$returnShipment.mean >=0.5573,1,0)
names(riskyManuf) <- c("manufacturerID","numManufOrders","numManufReturns","manufRiskFlag")
# Merge
orders.train <- merge(orders.train,riskyManuf,by="manufacturerID")
# Items
riskyItems <- summaryBy(returnShipment ~ itemID,orders.train,FUN=c(length,mean))
summary(riskyItems$returnShipment.mean)
summary(riskyItems$returnShipment.length)
summary(riskyItems[which(riskyItems$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyItems$itemRiskFlag <- ifelse(riskyItems$returnShipment.length>=50 & riskyItems$returnShipment.mean >=0.5938,1,0)
names(riskyItems) <- c("itemID","numItemOrders","numItemReturns","itemRiskFlag")
# Merge
orders.train <- merge(orders.train,riskyItems,by="itemID")
# Customers
riskyCust <- summaryBy(returnShipment ~ customerID,orders.train,FUN=c(length,mean))
summary(riskyCust$returnShipment.mean)
summary(riskyCust$returnShipment.length)
summary(riskyCust[which(riskyCust$returnShipment.length>=50),]$returnShipment.mean)
# Using top quartile for a risk cutoff
riskyCust$custRiskFlag <- ifelse(riskyCust$returnShipment.length>=50 & riskyCust$returnShipment.mean >=0.6667,1,0)
names(riskyCust) <- c("customerID","numCustOrders","numCustReturns","custRiskFlag")
# Merge & clear workspace
orders.train <- merge(orders.train,riskyCust,by="customerID")
remove(riskyManuf,riskyItems,riskyCust)
# Check if items are always the same price (expect they're not, but wanted to verify before coding more)
# Using a merge because if I try to do quantile and mean in 1 step, the labels aren't clear
itemPricing <- merge(summaryBy(price ~ itemID,orders.train,FUN=quantile),
summaryBy(price ~ itemID,orders.train,FUN=mean),by="itemID")
View(itemPricing) # confirmed, going to attach to the orders.train data frame so we can later flag
orders.train <- merge(orders.train, itemPricing, by="itemID")
orders.train$difFromMeanPrice = orders.train$price - orders.train$price.mean
remove(itemPricing)
# Look at mean of returnShipment for each price point
# Currently saving this out as a separate table because I'm not entirely sure what to do with it
returnsByPrice <- summaryBy(returnShipment ~ itemID + price, orders.train, FUN=c(length,mean))
# Create OrderID variable
orders.table <- summaryBy(returnShipment ~ orderDate + customerID, orders.train, FUN=mean)
orders.table$orderID <- 1:nrow(orders.table)
orders.table <- orders.table[,-3]
orders.train <- merge(orders.train,orders.table,by=c("customerID","orderDate"))
remove(orders.table)
str(orders.train)
t.test(returnShipment~holidayFlag)
t.test(returnShipment~holidayFlag, data=orders.train)
t.test(returnShipment~bdayFlag, data=orders.train)
t.test(returnShipment~manufRiskFlag, data=orders.train) # not statistically significant
t.test(returnShipment~itemRiskFlag, data=orders.train) # TOTALLY statistically significant
t.test(returnShipment~custRiskFlag, data=orders.train) # TOTALLY statistically significant
orders.train$LetterSize <- ifelse(orders.train$sizeLetter!='NA',1,0)
orders.train$LetterSize
orders.train$LetterSize <- ifelse(orders.train$sizeLetter!=NA,1,0)
orders.train$LetterSize
orders.train$LetterSize <- ifelse(orders.train$sizeLetter=='NA',0,1)
orders.train$LetterSize
orders.train$LetterSize <- ifelse(is.na(orders.train$sizeLetter),0,1)
orders.train$LetterSize
orders.train$Pants <- ifelse(is.na(orders.train$sizePant),0,1)
orders.train$ChildSize <- ifelse(is.na(orders.train$sizeChild),0,1)
orders.train$ShoeDress <- ifelse(is.na(orders.train$sizeShoeDress),0,1)
orders.train$Pants
orders.train$ChildSize
orders.train$ShoeDress
t.test(returnShipment~LetterSize, data=orders.train) # TOTALLY statistically significant
t.test(returnShipment~Pants, data=orders.train) # TOTALLY statistically significant
t.test(returnShipment~ChildSize, data=orders.train) # TOTALLY statistically significant
t.test(returnShipment~ShoeDress, data=orders.train) # TOTALLY statistically significant
str(orders.train)
returns.lr <- glm(returnShipment ~ color + timeToDeliver + accountAge
+ customerAge + holidayFlag + bdayFlag + numItemsInOrder
+ manufRiskFlag + itemRiskFlag + custRiskFlag + LetterSize + Pants + ChildSize + ShoeDress,
family=binomial(link=logit), data=orders.train)
summary(returns.lr)
predict.train.logistic <- predict(returns.lr, orders.train, type="response")
predict.test.logistic <- predict(returns.lr, orders.test, type="response")
train.logistic.pred <- prediction(predict.train.logistic, orders.train$returnShipment)
train.logistic.roc <- performance(train.logistic.pred, "tpr","fpr")
train.logistic.auc <- (performance(train.logistic.pred, "auc"))@y.values
test.logistic.pred <- prediction(predict.test.logistic, test$returnShipment)
test.logistic.roc <- performance(test.logistic.pred, "tpr","fpr")
test.logistic.auc <- (performance(test.logistic.pred, "auc"))@y.values
library(rocr)
library("ROCR", lib.loc="C:/Users/Jim Braun/Documents/R/win-library/3.0")
predict.train.logistic <- predict(returns.lr, orders.train, type="response")
predict.test.logistic <- predict(returns.lr, orders.test, type="response")
train.logistic.pred <- prediction(predict.train.logistic, orders.train$returnShipment)
train.logistic.roc <- performance(train.logistic.pred, "tpr","fpr")
train.logistic.auc <- (performance(train.logistic.pred, "auc"))@y.values
test.logistic.pred <- prediction(predict.test.logistic, test$returnShipment)
test.logistic.roc <- performance(test.logistic.pred, "tpr","fpr")
test.logistic.auc <- (performance(test.logistic.pred, "auc"))@y.values
smp_size <- floor(0.7 * max(orders.train$orderID))
set.seed(498)
train_ind <- sample(seq_len(max(orders.train$orderID)), size = smp_size)
orders.train$trainTest <- train_ind[orders.train$orderID]
train <- orders.train[which(orders.train$trainTest>0), ]
test <- orders.train[-which(orders.train$trainTest>0), ]
remove(smp_size,train_ind)
predict.train.logistic <- predict(returns.lr, train, type="response")
predict.test.logistic <- predict(returns.lr, test, type="response")
train.logistic.pred <- prediction(predict.train.logistic, train$returnShipment)
train.logistic.roc <- performance(train.logistic.pred, "tpr","fpr")
train.logistic.auc <- (performance(train.logistic.pred, "auc"))@y.values
test.logistic.pred <- prediction(predict.test.logistic, test$returnShipment)
test.logistic.roc <- performance(test.logistic.pred, "tpr","fpr")
test.logistic.auc <- (performance(test.logistic.pred, "auc"))@y.values
pdf(file = "full_model_ROC.pdf", width = 11, height = 8.5)  ##/\open pdf/\##
plot(train.logistic.roc, col = "darkgreen", main = "ROC Curves for Logistic Regression Model")
plot(test.logistic.roc, col = "red",  add = TRUE)
abline(c(0,1))
# Draw a legend.
train.legend <- paste("Train: AUC=", round(train.logistic.auc[[1]], digits=3))
test.legend <- paste("Test : AUC=", round(test.logistic.auc[[1]], digits=3))
legend(0.6, 0.5, c(train.legend,test.legend), c(3,2))
dev off
dev.off()
# plot the full model ROC curves
pdf(file = "LR_model_ROC.pdf", width = 11, height = 8.5)  ##/\open pdf/\##
plot(train.logistic.roc, col = "darkgreen", main = "ROC Curves for Logistic Regression Model")
plot(test.logistic.roc, col = "red",  add = TRUE)
abline(c(0,1))
# Draw a legend.
train.legend <- paste("Train: AUC=", round(train.logistic.auc[[1]], digits=3))
test.legend <- paste("Test : AUC=", round(test.logistic.auc[[1]], digits=3))
legend(0.6, 0.5, c(train.legend,test.legend), c(3,2))
dev.off()
returns.lr <- glm(returnShipment ~ color + timeToDeliver + accountAge
+ customerAge + holidayFlag + bdayFlag + numItemsInOrder
+ manufRiskFlag + itemRiskFlag + custRiskFlag
+ LetterSize + Pants + ChildSize + ShoeDress + difFromMeanPrice + state
+ price + salutation + customerAge + accountAge,
family=binomial(link=logit), data=train)
summary(returns.lr)
predict.train.logistic <- predict(returns.lr, train, type="response")
predict.test.logistic <- predict(returns.lr, test, type="response")
train.logistic.pred <- prediction(predict.train.logistic, train$returnShipment)
train.logistic.roc <- performance(train.logistic.pred, "tpr","fpr")
train.logistic.auc <- (performance(train.logistic.pred, "auc"))@y.values
test.logistic.pred <- prediction(predict.test.logistic, test$returnShipment)
test.logistic.roc <- performance(test.logistic.pred, "tpr","fpr")
test.logistic.auc <- (performance(test.logistic.pred, "auc"))@y.values
# plot the full model ROC curves
pdf(file = "LR_model_ROC.pdf", width = 11, height = 8.5)  ##/\open pdf/\##
plot(train.logistic.roc, col = "darkgreen", main = "ROC Curves for Logistic Regression Model")
plot(test.logistic.roc, col = "red",  add = TRUE)
abline(c(0,1))
# Draw a legend.
train.legend <- paste("Train: AUC=", round(train.logistic.auc[[1]], digits=3))
test.legend <- paste("Test : AUC=", round(test.logistic.auc[[1]], digits=3))
legend(0.6, 0.5, c(train.legend,test.legend), c(3,2))
dev.off()
predictions<-cut(rpredict.test.logistic, c(-Inf,0.5,Inf), labels=c("Keep","Return"))
# Now have a look - classes are assigned
str(predictions)
summary(predictions)
# compare to test$pick to ensure same # of levels and obs
str(test$pick)
summary(test$pick)
confusionMatrix(predictions, test$pick)
predictions<-cut(predict.test.logistic, c(-Inf,0.5,Inf), labels=c("Keep","Return"))
str(predictions)
summary(predictions)
# compare to test$pick to ensure same # of levels and obs
str(test$pick)
summary(test$pick)
confusionMatrix(predictions, test$pick)
library("caret", lib.loc="C:/Users/Jim Braun/Documents/R/win-library/3.0")
confusionMatrix(predictions, test$pick)
library(doBy)
library(ggplot2)
# Read in data from GitHub
orders.train <- read.table("orders_train.txt", header = TRUE, sep = ";")
str(orders.train)
#-----------------------#
# Correct Data Formats  #
#-----------------------#
# Update date fields to date type instead of factors
orders.train$orderDate <- as.Date(orders.train$orderDate, format = "%Y-%m-%d")
orders.train$deliveryDate <- as.Date(orders.train$deliveryDate, format = "%Y-%m-%d")
orders.train$dateOfBirth <- as.Date(orders.train$dateOfBirth, format = "%Y-%m-%d")
orders.train$creationDate <- as.Date(orders.train$creationDate, format = "%Y-%m-%d")
orders.train$timeToDeliver <- as.numeric(difftime(orders.train$deliveryDate,orders.train$orderDate,unit="days"))
# Age of the account, in years but rounded to nearest tenth- seemed like a continuous variable was overkill here
orders.train$accountAge <- round(as.numeric(difftime(orders.train$orderDate,orders.train$creationDate,unit="weeks"))/52.25,1)
# want customer's age as an integer, similar to when you ask how old someone is
orders.train$customerAge <- floor(as.numeric(difftime(orders.train$orderDate,orders.train$dateOfBirth,unit="weeks"))/52.25)
# Check
summary(orders.train[15:17])
# timeToDeliver should never be negative, and age should never be negative
orders.train$timeToDeliver <- ifelse(orders.train$timeToDeliver<0,NA,orders.train$timeToDeliver)
orders.train$customerAge <- ifelse(orders.train$customerAge<0,NA,orders.train$customerAge)
# age should also probably not be > 100 - what should we use for the cut-off?
orders.train$customerAge <- ifelse(orders.train$customerAge>100,NA,orders.train$customerAge)
# Recheck
summary(orders.train[15:17])
# Recode ? to NA for color
orders.train$color <- ifelse(orders.train$color=="?",NA,orders.train$color)
# Recode "not reported" to NA for salutation
orders.train$salutation <- ifelse(orders.train$salutation=="not reported",NA,orders.train$salutation)
# Sizing recodes - creating a table with frequencies to work from and going to remove sizes as I recode them
# There may be some errors here- for example, Euro children's sizes start at 50, but some conversions go up to size 52 for men's suits, etc
##### not sure how many items this affects, but we could check the range of values for those items to see which class they belong to?
size.table <- summaryBy(size ~ size,orders.train,FUN=length)
View(size.table)
# Ones that seem like US sizes
orders.train$sizeLetter <- ifelse(as.character(orders.train$size)>"a",toupper(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.character(size.table$size)>"a"),]
orders.train$sizePant <- ifelse(as.numeric(as.character(orders.train$size))>2900,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>2900),]
# Euro children's sizes go from 50-188
# http://www.ebay.com/gds/Guide-to-Understanding-European-Clothing-Sizes-/10000000007740616/g.html
orders.train$sizeChild <- ifelse(as.numeric(as.character(orders.train$size))>=50 & as.numeric(as.character(orders.train$size))<=188,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=50 & as.numeric(as.character(size.table$size))<=188),]
#  Maybe sizes < 20 are US type sizes - either for shoes or women's dresses
#  both are difficult to size without trying on
orders.train$sizeShoeDress <- ifelse(as.numeric(as.character(orders.train$size))>=1 & as.numeric(as.character(orders.train$size))<=20,as.numeric(as.character(orders.train$size)),NA)
size.table <- size.table[-which(as.numeric(as.character(size.table$size))>=1 & as.numeric(as.character(size.table$size))<=20),]
# Remaining
orders.train$sizeOther <- ifelse(is.na(orders.train$sizeLetter) & is.na(orders.train$sizePant) & is.na(orders.train$sizeChild) & is.na(orders.train$sizeShoeDress), as.character(orders.train$size),NA)
# check
table(orders.train$sizeLetter)
table(orders.train$sizePant)
table(orders.train$sizeChild)
table(orders.train$sizeShoeDress)
table(orders.train$sizeOther)
orders.train$LetterSize <- ifelse(is.na(orders.train$sizeLetter),0,1)
orders.train$Pants <- ifelse(is.na(orders.train$sizePant),0,1)
orders.train$ChildSize <- ifelse(is.na(orders.train$sizeChild),0,1)
orders.train$ShoeDress <- ifelse(is.na(orders.train$sizeShoeDress),0,1)
#orders.train$PlusSize <- ifelse(is.na(orders.train$sizePlus),0,1)
# Add mode function - note that this only gives one mode if there is more than one
mymode <- function(x){
names(sort(-table(as.character(x))))[1]
}
custMode1 <- summaryBy(toupper(as.character(orders.train$size)) ~ orders.train$customerID, orders.train, FUN=mymode)
custMode2 <- summaryBy(sizeLetter ~ customerID, orders.train[-which(is.na(orders.train$sizeLetter)),], FUN=mymode)
custMode3 <- summaryBy(sizePant ~ customerID, orders.train[-which(is.na(orders.train$sizePant)),], FUN=mymode)
custMode4 <- summaryBy(sizeChild ~ customerID, orders.train[-which(is.na(orders.train$sizeChild)),], FUN=mymode)
custMode5 <- summaryBy(sizeOther ~ customerID, orders.train[-which(is.na(orders.train$sizeOther)),], FUN=mymode)
custMode <- merge(custMode1,custMode2,by="customerID",all=T)
custMode <- merge(custMode,custMode3,by="customerID",all=T)
custMode <- merge(custMode,custMode4,by="customerID",all=T)
custMode <- merge(custMode,custMode5,by="customerID",all=T)
names(custMode) <- c("customerID","sizeMode","szLetterMode","szPantMode", "szChildMode", "szOtherMode")
custMode6 <- summaryBy(sizeShoeDress ~ customerID, orders.train[-which(is.na(orders.train$sizeShoeDress)),], FUN=mymode)
custMode <- merge(custMode,custMode6,by="customerID",all=T)
names(custMode) <- c("customerID","sizeMode","szLetterMode","szPantMode", "szChildMode", "szOtherMode", "szShoeDressMode"")
)
)
##### Should we be looking at mode for each clothing type, and just noting if the next order does not belong to that mode for that type,
()
]
}
mymode <- function(x){
names(sort(-table(as.character(x))))[1]
}
custMode1 <- summaryBy(toupper(as.character(orders.train$size)) ~ orders.train$customerID, orders.train, FUN=mymode)
custMode2 <- summaryBy(sizeLetter ~ customerID, orders.train[-which(is.na(orders.train$sizeLetter)),], FUN=mymode)
custMode3 <- summaryBy(sizePant ~ customerID, orders.train[-which(is.na(orders.train$sizePant)),], FUN=mymode)
custMode4 <- summaryBy(sizeChild ~ customerID, orders.train[-which(is.na(orders.train$sizeChild)),], FUN=mymode)
custMode5 <- summaryBy(sizeOther ~ customerID, orders.train[-which(is.na(orders.train$sizeOther)),], FUN=mymode)
custMode6 <- summaryBy(sizeShoeDress ~ customerID, orders.train[-which(is.na(orders.train$sizeShoeDress)),], FUN=mymode)
custMode <- merge(custMode1,custMode2,by="customerID",all=T)
custMode <- merge(custMode,custMode3,by="customerID",all=T)
custMode <- merge(custMode,custMode4,by="customerID",all=T)
custMode <- merge(custMode,custMode5,by="customerID",all=T)
custMode <- merge(custMode,custMode6,by="customerID",all=T)
names(custMode) <- c("customerID","sizeMode","szLetterMode","szPantMode", "szChildMode", "szOtherMode", "szShoeDressMode"")
()
end
#
)
}
]
.
dev.off()
stop
end
